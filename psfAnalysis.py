import numpy as np
import matplotlib.pyplot as plt
import matplotlib.backends.backend_pdf

"""
Take in the table of psf stars generated by ViewSodTemplate psf, and a 
raw ANU format photometry file.

Match the psf stars to stars in the photometry file, and output a lightcurve
file for each star, and a summary file for the whole set.
"""

def psfAnalysis(psfFileName, photFileName, outputLcPrefix, outputSummaryName):
    psfData = np.loadtxt(psfFileName)
#    photData = np.loadtxt(photFileName, delimiter=';', converters={6: lambda s: (1.0 if s.startswith('W') else -1.0)})

    photData = np.loadtxt(photFileName, delimiter=';', usecols=(2,3,4,9,10,24,25))

    Fsummary = open(outputSummaryName, 'w')

    photTile = np.fix(photData[:,0])
    photSeq = np.fix(photData[:,1])

    nPsf = psfData.shape[0]

    plotFileName = outputLcPrefix + '_plt.pdf'
    pdf = matplotlib.backends.backend_pdf.PdfPages(plotFileName)
    
    for i in range(nPsf):
        psfStar = psfData[i, :]
        psfStarTile = int(psfStar[0])
        psfStarSeq = int(psfStar[1])
        psfStarMag0 = float(psfStar[2])/1000.
        psfStarMag1 = float(psfStar[4])/1000.
        psfPhotIdx = np.where((photTile==psfStarTile) & (photSeq==psfStarSeq))
        psfPhotLc = photData[psfPhotIdx[0],:]
        nLcPts = psfPhotLc.shape[0]
        if nLcPts > 0:
            time = psfPhotLc[:,2]
            rmag = psfPhotLc[:,3]
            rerr = psfPhotLc[:,4]
            bmag = psfPhotLc[:,5]
            berr = psfPhotLc[:,6]
            igood = np.where((rmag > -15) & (bmag > -15) & (rmag <= -2) & (bmag <= -2))
            ngood = len(igood[0])
            lcrMedian = np.median(rmag[igood])
            lcrStdev = np.std(rmag[igood])
            lcbMedian = np.median(bmag[igood])
            lcbStdev = np.std(bmag[igood])
            print >>Fsummary, psfStarTile, psfStarSeq, psfStarMag0, psfStarMag1, ngood, lcrMedian, lcrStdev, lcbMedian, lcbStdev
            Flc = open('%s_%d_%d.dat' % (outputLcPrefix, psfStarTile, psfStarSeq), 'w')
            print >>Flc, '# t rmag rerr bmag berr'
            for i in igood[0]:
                print >>Flc, time[i], rmag[i], rerr[i], bmag[i], berr[i]
            Flc.close()
            fig=plt.figure()
            plt.subplot(311)
            plt.title('%s LC %d_%d' % (psfFileName, psfStarTile, psfStarSeq))
            plt.plot(time[igood]-time[0], rmag[igood], 'r.')
            plt.subplot(312)
            plt.plot(time[igood]-time[0], bmag[igood], 'b.')
            plt.subplot(313)
            plt.plot(bmag[igood] - rmag[igood], bmag[igood], 'b.')
            pdf.savefig(fig)
            plt.close(fig)

    pdf.close()
